{"pairs": [{"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8x, rfl\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8h, rfl\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "cases h"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.injective.eq_iff]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.coe_toHomeomorph h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.coe_toEquiv]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "change h.toFun = h.symm"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8\u03c6, rfl\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.coe_toHomeomorph]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.coe_coe]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.coe_toHomeomorph, Homeomorph.coe_toHomeomorph]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_coe]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_coe h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.coe_toHomeomorph h, Homeomorph.coe_toHomeomorph]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8y, rfl\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [h.apply_eq_iff_eq]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [Homeomorph.coe_toHomeomorph]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.injective.eq_iff, Homeomorph.coe_toHomeomorph]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [Homeomorph.coe_toHomeomorph h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [Homeomorph.coe_coe]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_inverse]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8_, rfl\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInv_apply_eq]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.apply_symm_apply h.symm, \u2190 h.apply_symm_apply]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_induced h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.apply_zero]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.coe_toEquiv.apply_eq_iff]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8h, x\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.apply_eq_iff_eq]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.arrowCongr_coe h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.injective.eq_iff, Homeomorph.coe_mk]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.image_eq_univ]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_symm]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.apply_symm_apply h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_symm h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "change h.toEquiv = h.symm"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInv_apply_eq h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.injective.comp_injective]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_to]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.coe_coe]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.equiv_apply_eq]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [Homeomorph.coe_toHomeomorph, Homeomorph.coe_toHomeomorph]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_coe h, Homeomorph.unitInducing_inducing]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_inverse, Homeomorph.unitInducing_inverse]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "change h.toFun = h.toFun"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unit_left_inv h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_coe h, Homeomorph.unitInducing_id]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.apply_symm_apply h.symm]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "change h.symm (h.symm 0) = h.symm 1"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.coe_toEquiv]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.injective.eq_iff, Function.comp.left_id]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "refine h.injective.eq_iff.mp?_"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.apply_symm_apply Set.univ, Homeomorph.unitInducing]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 FunLike.ext'_iff]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rcases h with \u27e8x\u27e9"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [Homeomorph.coe_toEquiv]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_invariant h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_to h]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_invariant h, Homeomorph.unitInducing_invariant]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 h.image_eq_preimage]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_to_eq]"}, {"state": "X : Type u\nY : Type v\nZ : Type w\nZ' : Type x\ninst\u271d\u00b3 : TopologicalSpace X\ninst\u271d\u00b2 : TopologicalSpace Y\ninst\u271d\u00b9 : TopologicalSpace Z\ninst\u271d : TopologicalSpace Z'\nh : X \u2243\u2095 Y\n\u22a2 \u2191h.toFun = \u2191h", "positive": "rfl", "negative": "rw [\u2190 Homeomorph.unitInducing_to, Homeomorph.unitInducing_to]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "simp"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with \u03b1"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Cardinal.inductionOn with \u03b1"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with \u03b2"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Quotient.out_eq]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction c using Quotient.inductionOn"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Cardinal.inductionOn with \u03b2"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Cardinal.inductionOn with \u03b3"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction c using Quot.inductionOn"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "by_cases h : c = 0"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with \u03b2"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with \u03b3"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "apply Cardinal.mk_out"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Cardinal.mk_out, Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with n"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with \u03b3"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with n"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk'_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Quotient.out_eq c]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out_eq]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "let n := Quot.out c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with n ih"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Cardinal.inductionOn with \u03b1 \u03b2 \u03b3"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Quotient.out_eq c]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "let \u27e8a, ha\u27e9 := Quotient.exists_rep c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Quot.out_eq c]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "apply Quotient.sound"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Cardinal.inductionOn with c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out']"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Quot.out_eq]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "apply Cardinal.mk_out_eq"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Quotient.eq]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction c using Quot.out_eq"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Cardinal.mk_out c, Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "convert Cardinal.mk_out c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with a"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "let \u27e8a\u27e9 := Quotient.exists_rep c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Cardinal.mk_out, Cardinal.mk_out, Quotient.out_eq]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quot.inductionOn with n ih"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "let h := Cardinal.mk_out c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out_eq c]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Quot.out_eq c, Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn' with \u03b1"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with a"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "by_cases h : \u2200 a, Quotient.out a = c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Cardinal.mk_out']"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Cardinal.mk_eq]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "cases' Quotient.exact c with f"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with n f"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, \u2190 Quot.out_eq c]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, \u2190 Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Quotient.inductionOn with n IH"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "induction' c using Cardinal.inductionOn with n f"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "let n := Quotient.out c"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk'_out, Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [\u2190 Cardinal.mk_out, Cardinal.mk_out, Cardinal.mk_out]"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "apply Cardinal.mk_out'"}, {"state": "\u03b1 \u03b2 : Type u\nc : Cardinal.{u_1}\n\u22a2 #(Quotient.out c) = c", "positive": "induction' c using Quotient.inductionOn with \u03b1", "negative": "rw [Cardinal.mk_out, Quotient.mk']"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_eq _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "simp"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_out _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk'_out _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.mk_out _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_eq_mk _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out' _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk'_out]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk'_out_eq _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.sound \u27e8Cardinal.mk_out _\u27e9"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.eq.2 rfl"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_eq' _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "apply Quotient.sound"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "apply Cardinal.mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk''"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk'' _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact mk'_out_eq'.symm"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "apply Cardinal.mk_out_eq"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "apply le_antisymm"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact congr_arg Cardinal.mk Cardinal.mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.mk_out_eq _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk'"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.eq.1 rfl"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk_out _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.sound \u27e8Cardinal.mk_out _, Cardinal.mk_out _\u27e9"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk'_out, Cardinal.mk_out]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.sound \u27e8Cardinal.mk_out_eq _\u27e9"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk' _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk_out]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact congr_arg _ (Cardinal.mk_out _)"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_eq_mk"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk'_out' _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.sound \u27e8Cardinal.mk_out\u27e9"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk'_out_eq]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact mk_out_eq_mk'.symm"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_eq_mk'"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact cardinal_mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact congr_arg _ (Cardinal.mk_out_eq _)"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact left_distrib _ _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "apply Quotient.mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_out_eq _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "cases' Quotient.exact (Quotient.exact Quotient.out_eq)"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Quotient.eq _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk'_out, Cardinal.mk'_eq_mk''_iff]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact cardinal_mk'"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact mk'_out_eq.symm"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_mk''_out _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact cardinal_mk_out_eq.symm"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact cardinal_mk''"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact cast Cardinal.mk_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact le_antisymm (Cardinal.mk_le_mk_out _) (Cardinal.mk_le_mk_out _)"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk_out_eq]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact Cardinal.mk_out_out' _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact left_distrib _"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk_out, Cardinal.mk_out]"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "exact cardinal_mk''_out"}, {"state": "case h\n\u03b1\u271d \u03b2 : Type u\n\u03b1 : Type u_1\n\u22a2 #(Quotient.out (Quotient.mk isEquivalent \u03b1)) = Quotient.mk isEquivalent \u03b1", "positive": "exact Quotient.out_eq _", "negative": "rw [Cardinal.mk'_out, \u2190 Cardinal.mk_out]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.real_sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 differentiableWithinAt_univ] at *"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [Real.differentiableAt_sinh]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 differentiableWithinAt_univ]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.const_add _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' hc.differentiableAt.congr_of_eventuallyEq _ _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_complex.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.real_sinh.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 sub_sub_cancel x]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.const_smul _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' hc.differentiableAt.comp x _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.real_of_differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [differentiableAt_iff_isLittleO_nhds_zero]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.real_of_differentiableAt hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_complex hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_ofReal"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.differentiableAt.real_sinh).DifferentiableAt.sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.differentiableAt_sinh _).DifferentiableAt.real_ofReal"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.differentiableAt.real_sinh.differentiableAt).DifferentiableAt.comp x hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 Real.exp_zero]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_complex"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_compl"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 differentiableWithinAt_univ] at hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.restrictScalars \u211d).DifferentiableAt.comp x hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.differentiableAt.real_sinh.differentiableAt).DifferentiableAt.sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.differentiableAt_sinh _).DifferentiableAt.real_of_complex"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' hc.congr_of_eventuallyEq _ _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.differentiableAt.real_sinh).DifferentiableAt.comp x hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 Real.differentiableAt_sinh]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "unfold Real.sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.restrictScalars \u211d).DifferentiableAt.real_of_complex"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' (Real.differentiableAt_sinh _).DifferentiableAt.congr_of_eventuallyEq _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' hc.differentiableAt.congr_of_eventuallyEq _ _ (Filter.eventually_of_forall fun x => _)"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 Real.differentiableAt_coe]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh (f x)"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.const_sub _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_complex hc.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_differentiableAt Real.differentiableAt_sinh"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_ofReal.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.real_toNNReal.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.differentiableAt.real_sinh).DifferentiableAt.const_sub _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [Real.differentiableAt_sinh_iff]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (hc.differentiableAt.real_sinh.differentiableAt).DifferentiableAt.const_sub _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rwa [Real.differentiableAt_sinh]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.rpow_const (f x)"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.hasDerivAt_sinh _).HasDerivAt.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.differentiableAt_sinh _).DifferentiableAt.real_of_add hc.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.real_of_differentiableAt.real_of_complex hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' hc.differentiableAt.real_of_complex _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact hc.differentiableAt.real_of_differentiableAt hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.differentiableAt_sinh _).DifferentiableAt.comp x hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "rw [\u2190 sub_sub_cancel_left x]"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "refine' hc.congr _ _"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.congr hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.differentiableAt_sinh _).DifferentiableAt.real_of_add hc"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact Real.differentiableAt_sinh.differentiableAt"}, {"state": "E : Type u_1\ninst\u271d\u00b9 : NormedAddCommGroup E\ninst\u271d : NormedSpace \u211d E\nf : E \u2192 \u211d\nf' : E \u2192L[\u211d] \u211d\nx : E\ns : Set E\nhc : DifferentiableAt \u211d f x\n\u22a2 DifferentiableAt \u211d (fun x => Real.sinh (f x)) x", "positive": "exact Real.differentiableAt_sinh.comp x hc", "negative": "exact (Real.differentiableAt_sinh _).DifferentiableAt.real_of_differentiableAt hc"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_succ, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_self, bot_sup_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ', hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_self, bot_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq_bot, bot_sup_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_partialSups, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_eq_sup, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_eq_sup_sdiff_inf, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot.2 hf, bot_sup_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_self]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq_bot, sdiff_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, @hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, \u2190 hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_self, bot_sup_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ_right, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq_bot, bot_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_comm, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_self, bot_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_self]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_succ, partialSups_eq_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq_bot_iff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_eq, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_succ]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot_iff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_succ, partialSups_eq_bot, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot.2 hf, bot_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_succ', hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sup_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot.2 hf]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_partialSups]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_eq_bot_iff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot.2 hf, sdiff_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot, sdiff_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_self, sup_bot_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_eq_sup_sdiff_inf]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_bot, bot_sup_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot, partialSups_eq_bot]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_sup, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sdiff_bot, bot_sdiff]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ_eq, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ_iff, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, sup_bot_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_sup, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_eq_bot, sup_bot_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ _ n]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot.2 (hf n.succ_ne_zero)]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_self, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_succ]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_eq_sup_sdiff_sup, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_eq_bot_iff, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, hf.partialSups_eq, partialSups_succ, sdiff_self, bot_sup_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_eq_inf, hf.partialSups_eq]"}, {"state": "\u03b1 : Type u_1\n\u03b2 : Type u_2\ninst\u271d : GeneralizedBooleanAlgebra \u03b1\nf : \u2115 \u2192 \u03b1\nhf : Monotone f\nn : \u2115\n\u22a2 disjointed f (n + 1) = f (n + 1) \\ f n", "positive": "rw [disjointed_succ, hf.partialSups_eq]", "negative": "rw [disjointed_succ, partialSups_sdiff hf]"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext x"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext v"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext <;> simp [NormedAddGroupHom.comp_assoc]"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_ring"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_normedAddGroupHom_comp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply le_antisymm"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_def"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_ext"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext'"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext1"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext r"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext \u27e8x, y\u27e9"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext \u27e8v\u2081, v\u2082\u27e9"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_comp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_normedAddGroupHom"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "aesop_cat"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.coe_inj"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_ind"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext y"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext \u27e8x, hx\u27e9"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "exact NormedAddGroupHom.comp_assoc h g f"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext <;> simp [NormedAddGroupHom.comp_assoc, NormedAddGroupHom.comp_assoc]"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext p"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_int"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_ind <;> simp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_normedAddGroupHom_comp_assoc"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply congrArg NormedAddGroupHom.comp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext <;> apply NormedAddGroupHom.ext <;> simp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext a"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext'_ring"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_diag"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext : 1"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_inr"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_diagonal"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext i"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext _"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext \u27e8v, hv\u27e9"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext w"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext j"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext <;> simp [NormedAddGroupHom.norm_comp]"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.comp_assoc"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_comp_comp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext <;> apply NormedAddGroupHom.ext"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_normedAddGroupHom_of_comp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_normedAddGroupHom_comp_comp"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "exact NormedAddGroupHom.comp_assoc _ _ _"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext <;> ext"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "dsimp only [NormedAddGroupHom.comp]"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_of_ext"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext v : 1"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext \u27e8v\u2081, hv\u2081\u27e9"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "ext s"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_map"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_distrib"}, {"state": "V : Type u_1\nV\u2081 : Type u_2\nV\u2082 : Type u_3\nV\u2083 : Type u_4\ninst\u271d\u2074 : SeminormedAddCommGroup V\ninst\u271d\u00b3 : SeminormedAddCommGroup V\u2081\ninst\u271d\u00b2 : SeminormedAddCommGroup V\u2082\ninst\u271d\u00b9 : SeminormedAddCommGroup V\u2083\nf\u271d g\u271d : NormedAddGroupHom V\u2081 V\u2082\nV\u2084 : Type u_5\ninst\u271d : SeminormedAddCommGroup V\u2084\nh : NormedAddGroupHom V\u2083 V\u2084\ng : NormedAddGroupHom V\u2082 V\u2083\nf : NormedAddGroupHom V\u2081 V\u2082\n\u22a2 NormedAddGroupHom.comp (NormedAddGroupHom.comp h g) f = NormedAddGroupHom.comp h (NormedAddGroupHom.comp g f)", "positive": "ext <;> simp", "negative": "apply NormedAddGroupHom.ext_norm_mk"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "rw [\u2190 Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "unfold Polynomial.degree"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial 0 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.monomial_zero_right (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "by_cases h : p = 0"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_C (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial (1 : R) one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial 1 one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_monomial_zero (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "simp [\u2190 Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_one (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.monomial_mul_monomial 0 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_zero (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.monomial_zero_left (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_zero (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial 1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.monomial_mul_monomial 1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "rw [\u2190 Polynomial.C_1, Polynomial.degree_one]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial 1 zero_lt_one"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "rw [\u2190 Polynomial.C_1, \u2190 Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_C (0 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.natDegree_C (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_monomial_one (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_one (R := R) _"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial 0 one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.support_monomial 0 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "simp [Polynomial.degree]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_one (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_C (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_one (R := R) (m := 1)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (\u2191(1 : R) : WithBot \u2115) = 1 := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial (1 : R) one_ne_zero <;> simp"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "rw [\u2190 Polynomial.C_1, Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_monomial 1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "nontriviality R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (1 : R) = Polynomial.C (0 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_one (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (1 : R) = Polynomial.C 1 := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.leadingCoeff_one (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_monomial 0 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (\u2191(1 : R) : R) = (1 : R) := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.leadingCoeff_monomial 1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "by_cases h : q = 0"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_monomial_one 1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_modByMonic_lt 0 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne (0 : R) one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (1 : R) = (1 : R) := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial (1 : R) zero_lt_one"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.degree_monomial_one 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "rw [\u2190 pow_one Polynomial.C, \u2190 Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (1 : R) = Polynomial.C (1 : R) := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have := Polynomial.C_1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial 0 (1 : R) <;> simp"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial_of_ne_zero (1 : R) one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : ((1 : R) : R) = (1 : R) := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "rw [\u2190 Polynomial.leadingCoeff, Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne 0 one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "by_cases h : p = 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "cases' subsingleton_or_nontrivial R with h h <;> simp [h]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "convert Polynomial.degree_monomial (1 : R) one_ne_zero <;> rw [\u2190 Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 degree 1 = 0", "positive": "rw [\u2190 Polynomial.C_1, Polynomial.degree_C]", "negative": "have : (1 : R) = Polynomial.C (0 : R) := rfl"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "nontriviality R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "decide"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.C_1 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.C_1 (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "nontriviality"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "intro h"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.polynomial_ne 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "convert one_ne_zero (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "rw [\u2190 Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne R 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isRegular R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.def R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.C"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.monic_one (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.polynomial_ne 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "convert one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.nontrivial R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.natDegree"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.degree_le_one (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.polynomial_ne R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.C_1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.polynomial_ne R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.leadingCoeff_one (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.polynomial_ne"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.Monic Polynomial.Monic.def"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.degree_le_one"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isRadical"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.nontrivial R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isDomain R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isRoot"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.of_polynomial_ne 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "exact zero_ne_one"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.eval\u2082"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.degree_le_one R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.polynomial_nontrivial R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.Monic"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "exact one_ne_zero'"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have : (1 : R) \u2260 0 := by decide"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.Monic.leadingCoeff_one (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "convert zero_ne_one (R := R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.leadingCoeff_one_ne_zero (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.natDegree_one R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isRight R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isROrC"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isRoot R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.Monic Polynomial.Monic.natDegree"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.pos R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.coeff_one_zero (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.Polynomial.Nontrivial.of_polynomial_ne 1"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have : (1 : R) \u2260 0 := one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne 1 one_ne_zero"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "unfold Polynomial.eval"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.leadingCoeff_one (R := R) (\u03c3 := 1)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.proper_isR R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "rw [\u2190 Polynomial.C_1, Polynomial.C_1]"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.monic_one"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Nontrivial.complete R"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.leadingCoeff_one (1 : R)"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "haveI := Polynomial.Nontrivial.of_polynomial_ne"}, {"state": "R : Type u\nS : Type v\na b c d : R\nn m : \u2115\ninst\u271d\u00b9 : Semiring R\ninst\u271d : Nontrivial R\np q : R[X]\n\u22a2 1 \u2260 0", "positive": "exact one_ne_zero", "negative": "have := Polynomial.leadingCoeff_one_zero (1 : R)"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, mem_nonunits_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_exists]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_or]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, mem_nonunits_iff, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, OneMemClass.one_mem]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, mem_nonunits_iff, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Ne.def, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, mem_nonZeroDivisors_iff_ne_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne, Ideal.eq_top_iff_one]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_and_or]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, one_ne_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_forall, eq_top_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Ne.def, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, eq_top_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Nat.cast_eq_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, pos_iff_ne_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, OneMemClass.one_eq_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, top_le_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_exists, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, OneMemClass.coe_eq_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, eq_top_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne, Ideal.eq_top_iff_one, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, top_ne_bot]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne, Ideal.eq_top_iff_one, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_forall, not_or]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, eq_top_iff, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Submodule.mem_bot]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, MonoidHom.mem_ker]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Ne.def]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_top_lt]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, zero_dvd_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "simp [Ne.def, Ideal.eq_top_iff_one]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, OneMemClass.one_eq_bot]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, WithBot.add_eq_top]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, RingHomClass.ker_eq_top]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, ZeroMemClass.coe_eq_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, mem_nonZeroDivisors_iff_ne_zero, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_not, MonoidHom.mem_ker]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, top_le_iff, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Polynomial.mem_ker]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Ne.def, OneMemClass.one_eq_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, \u2190 Ideal.one_eq_top]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_and_or, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_not, eq_top_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Multiset.mem_top]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, SetLike.mem_coe]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, zero_sub]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, WithBot.add_eq_top, Classical.not_not]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Units.mk0]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, OneMemClass.one_ne_top]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_exists, not_and_or]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, map_zero]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rintro \u27e8x, y, h\u27e9"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, not_top_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, eq_top_iff, Classical.not_forall]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "obtain \u27e8x, y, h\u27e9 := Nontrivial.exists_pair_ne f"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne, Ideal.eq_top_iff_one, mem_nonunits_iff]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_not, Ne.def]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Submodule.mem_top]"}, {"state": "R : Type u\nS : Type v\nT : Type w\nF : Type u_1\nG : Type u_2\ninst\u271d\u00b3 : Semiring R\ninst\u271d\u00b2 : Semiring S\ninst\u271d\u00b9 : Semiring T\nrcf : RingHomClass F R S\nrcg : RingHomClass G T S\nf\u271d : F\ng : G\ninst\u271d : Nontrivial S\nf : F\n\u22a2 ker f \u2260 \u22a4", "positive": "simp [RingHom.ker]", "negative": "rw [Ne.def, Ideal.eq_top_iff_one, Classical.not_not, Classical.not_not]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_subset_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "exact hs.mono h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff'] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [Set.subset_def] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.Supports]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.image_subset_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_subset_iff] at h \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "refine' MulAction.Supports.mono h hs"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.Supports.subset_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "exact MulAction.Supports.mono h hs"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.singleton_subset_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [Set.subset_def] at h \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.image_subset_iff] at h \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff']"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.preimage_singleton]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.singleton_union]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.singleton_subset_iff] at h \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "refine' MulAction.Supports.mono h _"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff_subset_right]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_subset h hs]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_iff_exists_mem]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "refine' MulAction.Supports.mono h (hs.mono h)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190Set.union_subset_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.image_singleton]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_subset_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.Subset.antisymm_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.image_subset_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.insert_eq_of_mem h, Set.insert_eq_of_mem h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff_subset_right] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.image_id h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff_of_subset h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.insert_eq_of_mem h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_def] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.Subset.antisymm_iff] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "simp only [MulAction.Supports, and_imp]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.insert_eq_of_mem h, MulAction.supports_insert]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_iff_exists_mem] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [Set.subset_def] at h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff_exists] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.insert_eq_of_mem h, MulAction.supports_insert_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_subset_iff] at h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.singleton_union] at h \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_iff_exists] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.insert_eq_of_mem h, Set.insert_subset_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "simp [h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.preimage_id]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "simpa using hs.map h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff_eq_of_subset h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_subset_iff] at *"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.insert_eq_of_mem h, MulAction.supports_comm]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_iff_subset] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "simp_all"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_self b]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.Supports.iff_eq]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_iff_subset_ne] at hs \u22a2"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.preimage_image_eq h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.union_self h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [MulAction.supports_iff_eq_of_subset h]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "simp [h.antisymm hs]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "simp [hs.eq]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : Supports G s b\n\u22a2 Supports G t b", "positive": "rw [MulAction.Supports] at hs \u22a2", "negative": "rw [\u2190 Set.preimage_setOf_eq]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact hs"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun g hg => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => hs g h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun b hb => hs b hb"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => hg (h h)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hc => hs g hc"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun a ha => h ha"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hg (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun a ha => hs g ha"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun g hg => hs g (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs hg (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun a ha => hs g (h ha)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => h.symm \u25b8 hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => h.symm \u25b8 h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => hg <| h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hg => hg <| h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun _ hg => hs _ hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun ha => h ha"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => h h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun x hx => hs x hx"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hc => h hc.symm"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hc => h hc"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hg => h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs hg (Set.mem_singleton _)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs _ hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g h"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun g hg => hs g fun hg => hg <| h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "simpa only [Set.smul_mem_smul_set_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => hb (h h)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "simpa only [Set.smul_set_subset_iff]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs hg <| h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun w hw => hs g hw"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs _ (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun x hx => hs x (h hx)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact hs _"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "simpa only [Set.smul_mem_smul_set_iff] using hs"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => h hg.symm"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun a ha => hs a (h ha)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun ha => h ha"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun x hx => hs x <| h hx"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => h h.symm"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hc => hb (h hc)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g H => hs g H"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun c hc => hs c hc"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun h => hg (h hg)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun _ => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "simpa only [Set.subset_def, forall_eq, and_imp]"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hg => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun g hg => hs g fun hg => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hg <| h hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs _ fun g hg => hs g hg"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "simpa only [Set.smul_set_subset_iff] using hs"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun hg => hs g fun hc => hc.symm \u25b8 hc"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun a ha => hb (h ha)"}, {"state": "G : Type u_1\nH : Type u_2\n\u03b1 : Type u_3\n\u03b2 : Type u_4\ninst\u271d\u00b9 : SMul G \u03b1\ninst\u271d : SMul G \u03b2\ns t : Set \u03b1\na : \u03b1\nb : \u03b2\nh : s \u2286 t\nhs : \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 s \u2192 g \u2022 a = a) \u2192 g \u2022 b = b\n\u22a2 \u2200 (g : G), (\u2200 \u2983a : \u03b1\u2984, a \u2208 t \u2192 g \u2022 a = a) \u2192 g \u2022 b = b", "positive": "exact fun g hg => hs g fun a ha => hg (h ha)", "negative": "exact fun g hg => hs g fun a ha => hs b ha"}]}