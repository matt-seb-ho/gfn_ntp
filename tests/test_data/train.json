[{"url": "https://github.com/leanprover-community/mathlib4", "commit": "fe4454af900584467d21f4fd4fe951d29d9332a7", "file_path": ".lake/packages/std/Std/Data/List/Lemmas.lean", "full_name": "List.ext", "start": [823, 8], "end": [829, 63], "traced_tactics": [{"tactic": "have h0 : some a = some a' := h 0", "annotated_tactic": ["have h0 : <a>some</a> a = <a>some</a> a' := h 0", [{"full_name": "Option.some", "def_path": ".lake/packages/lean4/src/lean/Init/Prelude.lean", "def_pos": [2226, 5], "def_end_pos": [2226, 9]}, {"full_name": "Option.some", "def_path": ".lake/packages/lean4/src/lean/Init/Prelude.lean", "def_pos": [2226, 5], "def_end_pos": [2226, 9]}]], "state_before": "\u03b1 : Type u_1\na : \u03b1\nl\u2081 : List \u03b1\na' : \u03b1\nl\u2082 : List \u03b1\nh : \u2200 (n : Nat), get? (a :: l\u2081) n = get? (a' :: l\u2082) n\n\u22a2 a :: l\u2081 = a' :: l\u2082", "state_after": "\u03b1 : Type u_1\na : \u03b1\nl\u2081 : List \u03b1\na' : \u03b1\nl\u2082 : List \u03b1\nh : \u2200 (n : Nat), get? (a :: l\u2081) n = get? (a' :: l\u2082) n\nh0 : some a = some a'\n\u22a2 a :: l\u2081 = a' :: l\u2082"}, {"tactic": "injection h0 with aa", "annotated_tactic": ["injection h0 with aa", []], "state_before": "\u03b1 : Type u_1\na : \u03b1\nl\u2081 : List \u03b1\na' : \u03b1\nl\u2082 : List \u03b1\nh : \u2200 (n : Nat), get? (a :: l\u2081) n = get? (a' :: l\u2082) n\nh0 : some a = some a'\n\u22a2 a :: l\u2081 = a' :: l\u2082", "state_after": "\u03b1 : Type u_1\na : \u03b1\nl\u2081 : List \u03b1\na' : \u03b1\nl\u2082 : List \u03b1\nh : \u2200 (n : Nat), get? (a :: l\u2081) n = get? (a' :: l\u2082) n\naa : a = a'\n\u22a2 a :: l\u2081 = a' :: l\u2082"}, {"tactic": "simp only [aa, ext fun n => h (n+1)]", "annotated_tactic": ["simp only [aa, ext fun n => h (n+1)]", []], "state_before": "\u03b1 : Type u_1\na : \u03b1\nl\u2081 : List \u03b1\na' : \u03b1\nl\u2082 : List \u03b1\nh : \u2200 (n : Nat), get? (a :: l\u2081) n = get? (a' :: l\u2082) n\naa : a = a'\n\u22a2 a :: l\u2081 = a' :: l\u2082", "state_after": "no goals"}]}, {"url": "https://github.com/leanprover-community/mathlib4", "commit": "fe4454af900584467d21f4fd4fe951d29d9332a7", "file_path": ".lake/packages/std/Std/Data/List/Lemmas.lean", "full_name": "List.length_take", "start": [853, 9], "end": [856, 72], "traced_tactics": [{"tactic": "simp [Nat.zero_min]", "annotated_tactic": ["simp [<a>Nat.zero_min</a>]", [{"full_name": "Nat.zero_min", "def_path": ".lake/packages/lean4/src/lean/Init/Data/Nat/Lemmas.lean", "def_pos": [340, 27], "def_end_pos": [340, 35]}]], "state_before": "\u03b1 : Type u_1\nl : List \u03b1\n\u22a2 length (take 0 l) = min 0 (length l)", "state_after": "no goals"}, {"tactic": "simp [Nat.min_zero]", "annotated_tactic": ["simp [<a>Nat.min_zero</a>]", [{"full_name": "Nat.min_zero", "def_path": ".lake/packages/lean4/src/lean/Init/Data/Nat/Lemmas.lean", "def_pos": [342, 27], "def_end_pos": [342, 35]}]], "state_before": "\u03b1 : Type u_1\nn : Nat\n\u22a2 length (take (succ n) []) = min (succ n) (length [])", "state_after": "no goals"}, {"tactic": "simp [Nat.succ_min_succ, add_one, length_take]", "annotated_tactic": ["simp [<a>Nat.succ_min_succ</a>, <a>add_one</a>, length_take]", [{"full_name": "Nat.succ_min_succ", "def_path": ".lake/packages/lean4/src/lean/Init/Data/Nat/Lemmas.lean", "def_pos": [333, 9], "def_end_pos": [333, 22]}, {"full_name": "Nat.add_one", "def_path": ".lake/packages/lean4/src/lean/Init/Data/Nat/Basic.lean", "def_pos": [125, 9], "def_end_pos": [125, 16]}]], "state_before": "\u03b1 : Type u_1\nn : Nat\nhead\u271d : \u03b1\nl : List \u03b1\n\u22a2 length (take (succ n) (head\u271d :: l)) = min (succ n) (length (head\u271d :: l))", "state_after": "no goals"}]}]